---
alwaysApply: false
description: "Guía para implementar nuevas características siguiendo los principios de Arquitectura Limpia/Hexagonal. Define las capas y la regla de dependencia."
---
# GUÍA DE ARQUITECTURA LIMPIA/HEXAGONAL

Al desarrollar una nueva característica, estructura el código de acuerdo con las siguientes capas y reglas. Esta es una regla `Agent Requested` o `Manual` para ser usada al inicio de tareas complejas.

## Capas Arquitectónicas

1.  **Domain (Dominio):**
    *   **Contenido:** Lógica de negocio pura, entidades, objetos de valor y reglas de negocio agnósticas al framework. Solo TypeScript/JavaScript puro.
    *   **Dependencias:** No tiene dependencias de otras capas.[29, 30]

2.  **Application (Aplicación):**
    *   **Contenido:** Casos de uso que orquestan el flujo de datos entre el dominio y la infraestructura. Contiene la lógica específica de la aplicación.
    *   **Dependencias:** Depende del Dominio.[29, 31]

3.  **Adapters/Infrastructure (Adaptadores/Infraestructura):**
    *   **Contenido:** Implementaciones concretas de interfaces definidas en capas internas. Esto incluye componentes de UI (Astro), clientes API (fetch), repositorios de datos, etc.
    *   **Dependencias:** Depende de la capa de Aplicación (a través de la inversión de dependencias).[31, 32]

## La Regla de Dependencia

**EL CÓDIGO EN UNA CAPA INTERNA NUNCA DEBE DEPENDER DEL CÓDIGO EN UNA CAPA EXTERNA.**

*   **Ejemplo:** La lógica del Dominio no debe tener conocimiento de Astro, de cómo se renderiza la UI, ni de la fuente de los datos (API, localStorage).
*   La comunicación entre capas se realiza a través de abstracciones (interfaces/tipos) definidas en las capas internas, que son implementadas por las capas externas (Inversión de Dependencias).[33]